plugins {
  id 'java'
  id 'org.openapi.generator' version '7.13.0'
  id 'com.diffplug.spotless' version '7.0.4'
  id 'jacoco'
  id 'maven-publish'
  id "com.github.ben-manes.versions" version "0.52.0"
  id "org.cyclonedx.bom" version "2.3.1"
}

group = 'uk.gov.hmcts.dcs'
version = System.getProperty('API_SPEC_VERSION') ?: '0.0.999'

def githubActor = project.findProperty("github.actor") ?: System.getenv("GITHUB_ACTOR")
def githubToken = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
def githubRepo = System.getenv("GITHUB_REPOSITORY")

def azureADOArtifactRepository = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
def azureADOArtifactActor = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
def azureADOArtifactToken = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")

def formatterUrl = 'https://raw.githubusercontent.com/hmcts/api-cp-code-style/refs/heads/main/config/formatter/eclipse-formatter.xml'
def formatterPath = "${layout.buildDirectory.get().asFile.absolutePath}/eclipse-formatter.xml"

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

openApiGenerate {
  generatorName = "java"
  inputSpec = "${rootDir}/src/main/resources/openapi/dcs-caseadmin.openapi.yml"
  outputDir = "${layout.buildDirectory.get().asFile.absolutePath}/generated/sources/openapi"
  modelPackage = "uk.gov.hmcts.dcs.openapi.model"

  // Configuration options for the Java generator
  configOptions = [
          library: "native", // Use native Java library
          dateLibrary: "java8", // Use Java 8 time API
          hideGenerationTimestamp: "true",
          //Ensure Jackson is used
          serializationLibrary: "jackson",
          useJakartaEe: "false", // To avoid Jakarta EE dependencies
          sourceFolder: "src/main/java",
          generateApis: "false",  // Generate only models
          generateApiTests: "false",
          generateModelTests: "false",
          generateSupportingFiles: "false",
  ]
}

sourceSets {
  main {
    java {
      srcDir "${layout.buildDirectory.get().asFile.absolutePath}/generated/sources/openapi/src/main/java"
    }
  }
}

dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-core:2.19.1'  // Use a compatible version
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.1' // For Java 8 date/time
  implementation 'org.slf4j:slf4j-api:2.0.17'
  implementation 'ch.qos.logback:logback-classic:1.5.18'
  //If you use the validation, also add this
  implementation 'io.swagger.parser.v3:swagger-parser:2.1.30'
  implementation 'io.swagger.core.v3:swagger-annotations:2.2.34'

  implementation 'javax.annotation:javax.annotation-api:1.3.2'

  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

  testImplementation(platform('org.junit:junit-bom:5.13.1'))
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs = ["-Xlint:unchecked", "-Werror"]
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

tasks.named('test') {
  useJUnitPlatform()
  systemProperty 'API_SPEC_VERSION', System.getProperty('API_SPEC_VERSION', '0.0.0')
  failFast = true
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
  }
}

tasks.named('jacocoTestReport') {
  dependsOn tasks.named('test')
  reports {
    xml.required.set(true)
    csv.required.set(false)
    html.required.set(true)
  }
}

tasks.named('check') {
  dependsOn tasks.named('jacocoTestReport')
}

// check dependencies upon release ONLY
tasks.named("dependencyUpdates").configure {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = azureADOArtifactRepository
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
  repositories {
    maven {
      name = "GitHubPackages"
      url = uri("https://maven.pkg.github.com/$githubRepo")
      credentials {
        username = githubActor
        password = githubToken
      }
    }
    maven {
      name = "AzureArtifacts"
      url = uri(azureADOArtifactRepository)
      credentials {
        username = azureADOArtifactActor
        password = azureADOArtifactToken
      }
    }
  }
}

//Creation of Software Bill of Materials
//https://github.com/CycloneDX/cyclonedx-gradle-plugin
cyclonedxBom {
  projectType = "library" // or application
  includeConfigs = ["runtimeClasspath"]
  skipConfigs = ["test", "testImplementation"]
  schemaVersion = "1.6"
  componentVersion = providers.provider { project.version.toString() }
  destination = file("${layout.buildDirectory.get().asFile.absolutePath}/reports")
  includeBuildSystem = true
  outputName = "bom"
  outputFormat = "json"
}

jar {
  dependsOn tasks.named('cyclonedxBom')
  if (file("CHANGELOG.md").exists()) {
    println "✅ Including CHANGELOG.md in JAR"
    from('CHANGELOG.md') {
      into 'META-INF'
    }
  } else {
    println "⚠️  CHANGELOG.md not found, skipping inclusion in JAR"
  }
  def sbomFile = file("${layout.buildDirectory.get().asFile.absolutePath}/reports/bom.json")
  if (sbomFile.exists()) {
    println "✅ Including SBOM from ${sbomFile} in JAR"
    from(sbomFile) {
      into 'META-INF/sbom'
      rename { 'bom.json' }
    }
  } else {
    println "⚠️  SBOM (bom.json) not found, skipping inclusion in JAR"
  }
}

spotless {
  java {
    target 'build/generated/sources/openapi/src/main/**/*.java'
    removeUnusedImports()
    eclipse().configFile(formatterPath)
  }
}

tasks.named('compileJava') {
  dependsOn tasks.named('spotlessApply')
}

tasks.named("openApiGenerate") {
  inputs.file("${rootDir}/src/main/resources/openapi/dcs-caseadmin.openapi.yml")
}

tasks.named('spotlessApply') {
  dependsOn tasks.named('openApiGenerate'), tasks.named('downloadFormatter')
}

tasks.named('spotlessJava') {
  dependsOn tasks.named('openApiGenerate'), tasks.named('downloadFormatter')
}

tasks.register('downloadFormatter') {
  outputs.file(formatterPath)
  doLast {
    def file = new File(formatterPath)
    file.parentFile.mkdirs()
    file.text = new URI(formatterUrl).toURL().text
  }
}

tasks.withType(Checkstyle).configureEach {
  def generatedDir = file("${layout.buildDirectory.get().asFile.absolutePath}/generated/sources/openapi/src/main/java").canonicalPath
  source = source.filter { file ->
    !file.canonicalPath.startsWith(generatedDir)
  }
}